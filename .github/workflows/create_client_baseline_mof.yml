name: Create client baseline MOF

on:
  push:
    branches: 
      - master

jobs:
  create_mof:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Generate MOF
      run: |
        
        # Make sure NuGet available
        $nuget = Get-PackageProvider -Name NuGet -ListAvailable
        if ((-not $nuget) -or ($nuget.version -lt 2.8.5.208 )) {
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.208 -Force -Confirm:$false
        }

        # Make sure PolicyFileEditor available
        if (-not (Get-Module -ListAvailable –FullyQualifiedName @{ModuleName="PolicyFileEditor";ModuleVersion="3.0.1"})){
            Install-Module -Name "PolicyFileEditor" -RequiredVersion 3.0.1 -Force 
        }

        # Make sure Test-PSRemoting available
        if (-not (Get-Module -ListAvailable –FullyQualifiedName @{ModuleName="Test-PSRemoting";ModuleVersion="1.0.1"})){
            Install-Module -Name "Test-PSRemoting" -RequiredVersion 1.0.1 -Force 
        }
      
        Set-Location .\windows\desired_state_configuration

        #Load all policies
        $localGroupPolicies = Get-ChildItem .\data\policies\ | ForEach-Object{
            (Import-PowerShellDataFile -Path $_.FullName).Policies
        }

        #Setup configuration data
        $ConfigurationData =
        @{
            AllNodes =
            @(
                @{
                    NodeName           = "localhost"
                    LocalGroupPolicies = $localGroupPolicies
                }
            )
        }

        # Dot source the client configuration
        . ./configurations/ClientBaseline.ps1

        # Generate MOFs
        ClientBaseline -ConfigurationData $ConfigurationData -OutputPath ./mof/

    - name: Upload MOF
      uses: actions/upload-artifact@v2
      with:
        name: client_baseline_mof
        path: ./windows/desired_state_configuration/mof/localhost.mof

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./windows/desired_state_configuration/mof/localhost.mof
        asset_name: client_baseline.mof
        asset_content_type: text/plain